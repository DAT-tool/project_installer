version: "3.9"

services:
{% for db in databases %}
  {{db.name}}:
    {% if db.command %}
    command: {{db.command}}
    {% endif %}
    image: {{docker_registery}}/{{db.image}}
    ports:
      - "{{'' if db.allow_public_db else '127.0.0.1:'}}{{db.port}}:{{db.realPort}}"
    {% if db.__has_envs %}
    environment:
      {% for key, val in db.envs %}{{key}}: '{{val}}' 
      {% endfor %}
    {% endif %}
    restart: unless-stopped
    # networks:
    #   project_net:
    #     aliases:
    #       - mysql
    {% if db.healthcheck %}
    healthcheck:
      test: {{db.healthcheck.test | safe}}
      timeout: {{db.healthcheck.timeout}}s
      retries: {{db.healthcheck.retries}}
    {% endif %}
    {% if db.volumes.length > 0 %}
    volumes:
      {% for vol in db.volumes %}- {{vol}}
      {% endfor %}
    {% endif %}
      # - ./hooks/mysql:/docker-entrypoint-initdb.d

{% endfor %}

{% for domain in sub_domains %}
  {{domain.name}}_app:
    image: {{project_name}}_{{domain.name}}
    {% if domain.volumes.length > 0 %}
    volumes:
      {% for vol in domain.volumes %}- {{vol}}
      {% endfor %}
    {% endif %}
    {% if domain.hostname %}
    hostname: '{{domain.hostname}}'
    {% endif %}
    {% if domain.hosts %}
    extra_hosts:
      {% for host in domain.hosts %}
      - {{host}}
      {% endfor %}
    {% endif %}
    ports:
      - "127.0.0.1:{{domain.exposePort}}:{{domain.port}}"
    # entrypoint: /bin/bash ./docker_entrypoints/app.sh
    {% if domain.__hasEnvs %}
    environment:
      {% for key, val in domain.envs %}{{key}}: {% if val is string %} '{{val}}' {% else %} {{val}} {% endif %}
      {% endfor %}
    {% endif %}
    restart: unless-stopped
    {% if domain.depends.length > 0 %}
    links:
      {% for link in domain.depends %}- {{link}}
      {% endfor %}
    depends_on:
      {% for link in domain.depends %}{{link}}:
        # condition: service_completed_successfully
        condition: service_healthy
      {% endfor %}
    {% endif %}
    # networks:
    #   project_net:
    #     aliases:
    #       - backend_app
{% endfor %}
  # Web proxy for SSL termination
  caddy:
    image: {{docker_registery}}/caddy:2.3.0
    restart: unless-stopped
    # ports:
    #   - "80:80"
    ports:
      {% if ssl_enabled %}
      - "80:80"
      - "443:443"
      {% else %}
      - "80:80"
      {% endif %}
      
    volumes:
      - ./hooks/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      {% if ssl_enabled %}
      - ./ssl:/etc/cert/
      {% endif %}
      
  nginx:
    image: {{docker_registery}}/nginx:stable
    restart: unless-stopped
    # container_name: talent_nginx
    # ports:
    #   {% if ssl_enabled %}
    #   - "80:80"
    #   - "443:443"
    #   {% else %}
    #   - "80:80"
    #   {% endif %}
    volumes:
      - ./hooks/nginx/conf:/etc/nginx/conf.d
      - ./hooks/nginx/uwsgi_params:/etc/nginx/uwsgi_params
      - ./data/static:/static
      - ./data/media:/media
      - ./data/nginx/logs:/var/log/nginx
      {% if ssl_enabled %}
      - ./ssl:/etc/nginx/certs
      {% endif %}
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    networks:
      default:
        # These aliases are for internal communication between containers when running locally with *.{{lms_host}} hostnames.
        aliases:
          - "{{domain_name}}"

    depends_on:
      {%for sub in sub_domains %}- {{sub.name}}_app
      {% endfor %}



# volumes:
#   mysqldb:
#     driver: local